# Return true if e.className contains the class c, false otherwise

###
# ブロック開閉処理
# 2015/12/21 ボタン画像の非表示処理を行わない
###

###
# Return the classList property of e, if it has one.
# Otherwise, return an object that simulates the DOMTokenList API for e.
# The returned object has contains(), add(), remove(), toggle() and toString()
# methods for testing and altering the set of classes of the element e.
# If the classList property is natively supported, the returned object is
# array-like and has length and array index properties. The simulated
# DOMTokenList is not array-like, but has a toArray() method that returns
# a true-array snapshot of the element's class names.
###

classList = (e) ->
  if e.classList
    e.classList
  else
    new CSSClassList(e)
  # Otherwise try to fake it

# CSSClassList is a JavaScript class that simulates DOMTokenList

CSSClassList = (e) ->
  @e = e
  return

do_onoff = (hdr, item) ->
  e = document.getElementById(hdr)
  e2 = document.getElementById(item)
  if e2.style.display == 'none'
    e2.style.display = ''
    classList(e).remove 'close'
    classList(e).add 'open'
  else
    e2.style.display = 'none'
    classList(e).remove 'open'
    classList(e).add 'close'
  return

open_close = (hdr, item) ->
  e = document.getElementById(hdr)
  e2 = document.getElementById(item)
  e.addEventListener 'click', (->
    do_onoff hdr, item
    return
  ), false
  classList(e).remove 'open'
  classList(e).add 'close'
  if classList(e).contains('open')
    #		e.style.display = '';
    e2.style.display = ''
  if classList(e).contains('close')
    #		e.style.display = '';
    e2.style.display = 'none'
  return

OCisSmartPhone = ->
  navigator.userAgent.indexOf('iPhone') > 0 and navigator.userAgent.indexOf('iPad') == -1 or navigator.userAgent.indexOf('iPod') > 0 or navigator.userAgent.indexOf('Android') > 0

OCdisplayWidth = ->
  window.parent.screen.width

OCwindowWidth = ->
  if window.screen.width < window.innerWidth
    return window.screen.width
  window.innerWidth

CSSClassList::contains = (c) ->
  # Check that c is a valid class name
  if c.length == 0 or c.indexOf(' ') != -1
    throw new Error('Invalid class name: \'' + c + '\'')
  # Check common cases first
  classes = @e.className
  if !classes
    return false
  # e has no classes at all
  if classes == c
    return true
  # e has one class that matches exactly
  # Otherwise, use a RegExp to search for c as a word by itself
  # \b in a regular expression requires a match at a word boundary.
  classes.search('\\b' + c + '\\b') != -1

# Add c to the e.className if it is not already present

CSSClassList::add = (c) ->
  if @contains(c)
    return
  # Do nothing if already present
  classes = @e.className
  if classes and classes[classes.length - 1] != ' '
    c = ' ' + c
  # Add a space if we need one
  @e.className += c
  # Add c to the className
  return

# Remove all occurrences of c from e.className

CSSClassList::remove = (c) ->
  # Make sure c is a valid class name
  if c.length == 0 or c.indexOf(' ') != -1
    throw new Error('Invalid class name: \'' + c + '\'')
  # Remove all occurances of c as a word, plus any trailing space
  pattern = new RegExp('\\b' + c + '\\b\\s*', 'g')
  @e.className = @e.className.replace(pattern, '')
  return

# Add c to e.className if it is not already present and return true.
# Otherwise, remove all occurrences of c from e.className and return false.

CSSClassList::toggle = (c) ->
  if @contains(c)
    # If e.className contains c
    @remove c
    # then remove it.
    false
  else
    # Otherwise:
    @add c
    # add it.
    true

# Return e.className itself

CSSClassList::toString = ->
  @e.className

# Return of the names in e.className

CSSClassList::toArray = ->
  @e.className.match(/\b\w+\b/g) or []

# ---
# generated by js2coffee 2.2.0
